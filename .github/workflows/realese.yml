name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build_and_upload:
    name: Build and Upload Binaries
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: dose3-linux-x64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: dose3-macos-x64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: dose3-windows-x64.zip

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        working-directory: ./rs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        if: runner.os != 'Linux'
      - name: Build binary (Linux)
        run: |
          # sudo apt-get update && sudo apt-get install -y build-essential
          cargo build --release --target ${{ matrix.target }}
        if: runner.os == 'Linux'

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $exe_name = "dose3.exe" # แก้ไขเป็นชื่อโปรแกรมของคุณ
          $source_path = "target/${{ matrix.target }}/release/$exe_name"
          Compress-Archive -Path $source_path -DestinationPath "${{ matrix.asset_name }}"
      
      - name: Package binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          $exe_name = "dose3" # แก้ไขเป็นชื่อโปรแกรมของคุณ
          $source_path = "target/${{ matrix.target }}/release/$exe_name"
          tar -czvf "${{ matrix.asset_name }}" -C "target/${{ matrix.target }}/release/" $exe_name

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}

          asset_path: ./rs/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}